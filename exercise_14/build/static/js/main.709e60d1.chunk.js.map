{"version":3,"sources":["components/Note.js","services/notes.js","components/Notification.js","components/Footer.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","baseUrl","request","axios","get","nonExisting","id","date","then","response","data","concat","newObject","post","put","Notification","message","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","map","find","n","changedNote","returnedNotes","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","length","returnedNote","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.709e60d1.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Note = ({note, toggleImportance}) => {\r\n  const label = note.important \r\n    ? \"make not important\" : \"make important\"\r\n\r\n  return (\r\n    <li className='note'>\r\n      {note.content}\r\n      <button onClick={toggleImportance}>{label}</button>  \r\n    </li>\r\n  )\r\n}\r\n\r\nexport default Note","import axios from \"axios\"\r\n\r\n// const baseUrl = 'http://localhost:3001/api/notes'\r\n// const baseUrl = 'https://infinite-spire-28691.herokuapp.com/api/notes'\r\n// use Relative URL\r\nconst baseUrl = '/api/notes'\r\n\r\nconst getAll = () => {\r\n  const request =  axios.get(baseUrl)\r\n  const nonExisting = {\r\n    id: 10000,\r\n    content: 'This note is not saved to server',\r\n    date: '2019-05-30T17:30:31.098Z',\r\n    important: true,\r\n  }\r\n  return request.then(response => response.data.concat(nonExisting))\r\n  // return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, update }","import React from \"react\"\r\n\r\nconst Notification = ({ message }) => {\r\n  if (message === null) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <div className='error'>\r\n      {message}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Notification","import React from 'react'\r\n\r\nconst Footer = () => {\r\n  const footerStyle = {\r\n    color: 'green',\r\n    fontStyle: 'italic',\r\n    fontSize: 16\r\n  }\r\n  return (\r\n    <div style={footerStyle}>\r\n      <br />\r\n      <em>Note app, Department of Computer Science, University of Helsinki 2021</em>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Footer\r\n\r\n// Inline styles and some of the other ways of adding styles to React components go completely against the grain of old conventions. Traditionally, it has been considered best practice to entirely separate CSS from the content (HTML) and functionality (JavaScript). According to this older school of thought, the goal was to write CSS, HTML, and JavaScript into their separate files.","import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport Note from './components/Note'\nimport noteService from './services/notes'\nimport './index.css'\nimport Notification from './components/Notification'\nimport Footer from './components/Footer'\n\nconst App = () => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState('some error happened...')\n\n  useEffect(() => {\n    // console.log('effect')\n    noteService\n      .getAll()\n      .then(initialNotes => {\n        // console.log('promise fulfilled')\n        setNotes(initialNotes) // make the component rerender\n      })\n  }, [])\n  // console.log('render', notes.length, 'notes')\n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5,\n      id: notes.length + 1\n    }\n\n    noteService\n      .create(noteObject)\n      .then(returnedNote => {\n        // console.log(response)\n        setNotes(notes.concat(returnedNote))\n        setNewNote('')\n      })\n    \n    // console.log(\"button clicked\", event.target)\n  }\n\n  const handleNoteChange = (event) => {\n    setNewNote(event.target.value)\n  }\n\n  const notesToShow = showAll\n    ? notes \n    : notes.filter(note => note.important === true)\n\n  const toggleImportanceOf = (id) => {\n    const note = notes.find(n => n.id === id)\n    const changedNote = {...note, important: !note.important}\n\n    noteService\n      .update(id, changedNote)\n      .then(returnedNotes => {\n        // console.log(response.data)\n        setNotes(notes.map(note => note.id !== id ? note : returnedNotes))\n      })\n      .catch(error => {\n        setErrorMessage(\n          `Note '${note.content}' was already removed from server`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n        setNotes(notes.filter(note => note.id !== id))\n      })\n    // console.log(`importance of ${id} needs to be toggled`)\n  }\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage}/>\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? \"important\" : \"all\"}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map(note =>\n          <Note key={note.id} note={note} toggleImportance={() => toggleImportanceOf(note.id)}/>\n        )}\n      </ul>\n      <form onSubmit={addNote}>\n          <input\n            value={newNote}\n            onChange={handleNoteChange}\n          />\n          <button type=\"submit\">save</button>\n      </form>\n      <Footer />\n    </div>\n  )\n\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n// import axios from 'axios'\n\n// const promise = axios.get('http://localhost:3001/notes')\n// console.log(promise)\n\n// promise.then(response => {\n//   console.log(response)\n// })\n\n// axios\n//   .get('http://localhost:3001/notes')\n//   .then(response => {\n//     const notes = response.data\n//     // console.log(notes)\n//     ReactDOM.render(\n//       <App notes={notes}/>,\n//       document.getElementById('root')\n//     )\n//   })\n\n// const promise2 = axios.get('http://localhost:3001/foobar')\n// console.log(promise2)\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}